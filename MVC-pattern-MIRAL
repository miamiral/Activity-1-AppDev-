# Model
class UserModel:
    def __init__(self, name, email):
        self.name = name
        self.email = email

# View
class UserView:
    def display_user(self, user):
        print("Name: ", user.name)
        print("Email: ", user.email)

# Controller
class UserController:
    def __init__(self, model, view):
        self.model = model
        self.view = view

    def set_name(self, name):
        self.model.name = name

    def set_email(self, email):
        self.model.email = email

    def update_view(self):
        self.view.display_user(self.model)

# Usage
if __name__ == "__main__":
    # Create a user model
    user = UserModel("Mia Miral", "mia.miral@gmail.com")

    # Create a view to display the user
    view = UserView()

    # Create a controller to update the user and display the view
    controller = UserController(user, view)

    # Update the user's email
    controller.set_email("mia.miral@gmail.com")

    # Display the updated user information
    controller.update_view()
    
    
// In this code, the "UserModel" class represents the data model, which in this case is a simple user object with a name and email. 
// The "UserView" class is responsible for displaying the user data to the user, 
// while the "UserController" class acts as an intermediary between the model and the view.

// The controller receives input from the user and updates the model accordingly. It also updates the view to reflect any changes made to the model. 
// In this code, we update the user's email and then display the updated user information using the update_view() method of the controller.
// This code example is a simple illustration of the MVC pattern in action.
// In practice, the pattern can be used to build more complex applications with more new data models, views, and controllers.
